AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Process Inbound Emails with AI

  Lambda subscribed to SNS topic and processes messages.

Parameters:
  BedrockModelIdForCategoryAndSummary:
    Type: String
    Description: Bedrock model ID for category and summary
  BedrockModelIdForAttachmentAnalysis:
    Type: String
    Description: Bedrock model ID for image analysis


Resources:

  ##########################################################################
  #  EventBridge EventBus
  #                          
  #  EventBus for routing categorized emails to appropriate handlers
  ##########################################################################
  EmailProcessingEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: EmailProcessingEventBus
      Description: EventBus for routing categorized email processing events

  ##########################################################################
  #  (FirstPassFunction) Lambda Function                            
  #                          
  #  This function receives messages messages from SNS and does the 
  #  initial analysis of the email.
  ##########################################################################
  FirstPassFunction:
    Type: AWS::Serverless::Function
    Properties:      
      Description: Lambda invoked by SNS topic to process Inbound Emails with AI categorization and summarization
      CodeUri: lambdas/first-pass/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 512
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
        - !ImportValue SendGridProcessInboundEmails-EventBridgeOperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          EMAIL_PROCESSING_EVENT_BUS: !Ref EmailProcessingEventBus
          BEDROCK_MODEL_ID_FOR_CATEGORY_AND_SUMMARY: !Ref BedrockModelIdForCategoryAndSummary
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForCategoryAndSummary}"
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EmailProcessingEventBus.Arn
      Events:
        SNSEvent:
          Type: SNS
          Properties:            
            Topic: !ImportValue 'SGInboundEmailTopicARN'

  ##########################################################################
  #  Sales Email Handler Lambda Function                            
  #                          
  #  Handles emails categorized as sales
  ##########################################################################
  SalesEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to handle sales-related emails
      CodeUri: lambdas/sales-handler/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 256
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SNS_OUTBOUND_EMAIL_TOPIC_ARN: !ImportValue SendGridOutboundEmailEventTopicARN
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          BEDROCK_MODEL_ID_FOR_CATEGORY_AND_SUMMARY: !Ref BedrockModelIdForCategoryAndSummary
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !ImportValue SendGridOutboundEmailEventTopicARN
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForCategoryAndSummary}"

  ##########################################################################
  #  Support Email Handler Lambda Function                            
  #                          
  #  Handles emails categorized as support
  ##########################################################################
  SupportEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to handle support-related emails
      CodeUri: lambdas/support-handler/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 256
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SNS_OUTBOUND_EMAIL_TOPIC_ARN: !ImportValue SendGridOutboundEmailEventTopicARN
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          BEDROCK_MODEL_ID_FOR_CATEGORY_AND_SUMMARY: !Ref BedrockModelIdForCategoryAndSummary
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !ImportValue SendGridOutboundEmailEventTopicARN
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForCategoryAndSummary}"

  ##########################################################################
  #  Account Email Handler Lambda Function                            
  #                          
  #  Handles emails categorized as account
  ##########################################################################
  AccountEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to handle account-related emails
      CodeUri: lambdas/account-handler/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 256
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SNS_OUTBOUND_EMAIL_TOPIC_ARN: !ImportValue SendGridOutboundEmailEventTopicARN
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          BEDROCK_MODEL_ID_FOR_CATEGORY_AND_SUMMARY: !Ref BedrockModelIdForCategoryAndSummary
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !ImportValue SendGridOutboundEmailEventTopicARN
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForCategoryAndSummary}"

  ##########################################################################
  #  Inquiry Email Handler Lambda Function                            
  #                          
  #  Handles emails categorized as inquiry
  ##########################################################################
  InquiryEmailHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to handle inquiry-related emails
      CodeUri: lambdas/inquiry-handler/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 256
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SNS_OUTBOUND_EMAIL_TOPIC_ARN: !ImportValue SendGridOutboundEmailEventTopicARN
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          BEDROCK_MODEL_ID_FOR_CATEGORY_AND_SUMMARY: !Ref BedrockModelIdForCategoryAndSummary
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !ImportValue SendGridOutboundEmailEventTopicARN
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForCategoryAndSummary}"

  ##########################################################################
  #  Process Attachments Lambda Function                            
  #                          
  #  Handles emails that have attachments
  ##########################################################################
  ProcessAttachmentsHandler:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda function to process emails with attachments
      CodeUri: lambdas/process-attachments/
      Handler: app.lambdaHandler
      AutoPublishAlias: live
      Runtime: nodejs20.x
      Architectures:
        - arm64
      Timeout: 300
      MemorySize: 1024
      Layers:
        - !ImportValue SendGridProcessInboundEmails-S3OperationsLayerArn
        - !ImportValue SendGridProcessInboundEmails-EventBridgeOperationsLayerArn
      Environment:
        Variables:
          REGION: !Ref "AWS::Region"
          SENDGRID_INBOUND_PARSE_BUCKET: !ImportValue 'SGInboundParseBucketName'
          EMAIL_PROCESSING_EVENT_BUS: !Ref EmailProcessingEventBus
          BEDROCK_MODEL_ID_FOR_ATTACHMENT_ANALYSIS: !Ref BedrockModelIdForAttachmentAnalysis
      Policies:
        - S3ReadPolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - S3WritePolicy:
            BucketName: !ImportValue 'SGInboundParseBucketName'
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${BedrockModelIdForAttachmentAnalysis}"
        - Statement:
            - Effect: Allow
              Action:
                - events:PutEvents
              Resource: !GetAtt EmailProcessingEventBus.Arn

  ##########################################################################
  #  EventBridge Rules for Category Routing
  ##########################################################################
  SalesEmailRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.processing"]
        detail-type: ["Email Categorized"]
        detail:
          categorization:
            category: ["sales"]
          hasAttachment: [false]
      Targets:
        - Arn: !GetAtt SalesEmailHandler.Arn
          Id: "SalesEmailTarget"

  SupportEmailRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.processing"]
        detail-type: ["Email Categorized"]
        detail:
          categorization:
            category: ["support"]
          hasAttachment: [false]
      Targets:
        - Arn: !GetAtt SupportEmailHandler.Arn
          Id: "SupportEmailTarget"

  AccountEmailRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.processing"]
        detail-type: ["Email Categorized"]
        detail:
          categorization:
            category: ["account"]
          hasAttachment: [false]
      Targets:
        - Arn: !GetAtt AccountEmailHandler.Arn
          Id: "AccountEmailTarget"

  InquiryEmailRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.processing"]
        detail-type: ["Email Categorized"]
        detail:
          categorization:
            category: ["inquiry"]
          hasAttachment: [false]
      Targets:
        - Arn: !GetAtt InquiryEmailHandler.Arn
          Id: "InquiryEmailTarget"

  HasAttachmentRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.processing"]
        detail-type: ["Email Categorized"]
        detail:
          hasAttachment: [true]
      Targets:
        - Arn: !GetAtt ProcessAttachmentsHandler.Arn
          Id: "HasAttachmentTarget"

  ##########################################################################
  #  EventBridge Rules for Attachment Processing Completion
  ##########################################################################
  SalesEmailAfterAttachmentsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.attachments"]
        detail-type: ["Attachments Processed"]
        detail:
          categorization:
            category: ["sales"]
      Targets:
        - Arn: !GetAtt SalesEmailHandler.Arn
          Id: "SalesEmailAfterAttachmentsTarget"

  SupportEmailAfterAttachmentsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.attachments"]
        detail-type: ["Attachments Processed"]
        detail:
          categorization:
            category: ["support"]
      Targets:
        - Arn: !GetAtt SupportEmailHandler.Arn
          Id: "SupportEmailAfterAttachmentsTarget"

  AccountEmailAfterAttachmentsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.attachments"]
        detail-type: ["Attachments Processed"]
        detail:
          categorization:
            category: ["account"]
      Targets:
        - Arn: !GetAtt AccountEmailHandler.Arn
          Id: "AccountEmailAfterAttachmentsTarget"

  InquiryEmailAfterAttachmentsRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref EmailProcessingEventBus
      EventPattern:
        source: ["email.attachments"]
        detail-type: ["Attachments Processed"]
        detail:
          categorization:
            category: ["inquiry"]
      Targets:
        - Arn: !GetAtt InquiryEmailHandler.Arn
          Id: "InquiryEmailAfterAttachmentsTarget"

  ##########################################################################
  #  Lambda Permissions for EventBridge
  ##########################################################################
  SalesEmailHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SalesEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SalesEmailRule.Arn

  SupportEmailHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SupportEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SupportEmailRule.Arn

  AccountEmailHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccountEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AccountEmailRule.Arn

  InquiryEmailHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InquiryEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InquiryEmailRule.Arn

  ProcessAttachmentsHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ProcessAttachmentsHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt HasAttachmentRule.Arn

  ##########################################################################
  #  Lambda Permissions for Attachment Processing Completion Rules
  ##########################################################################
  SalesEmailHandlerAfterAttachmentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SalesEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SalesEmailAfterAttachmentsRule.Arn

  SupportEmailHandlerAfterAttachmentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SupportEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SupportEmailAfterAttachmentsRule.Arn

  AccountEmailHandlerAfterAttachmentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AccountEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt AccountEmailAfterAttachmentsRule.Arn

  InquiryEmailHandlerAfterAttachmentsPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InquiryEmailHandler
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt InquiryEmailAfterAttachmentsRule.Arn
    